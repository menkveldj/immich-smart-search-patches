diff --git a/open-api/typescript-sdk/src/fetch-client.ts b/open-api/typescript-sdk/src/fetch-client.ts
index 0f0357c..b614997 100644
--- a/open-api/typescript-sdk/src/fetch-client.ts
+++ b/open-api/typescript-sdk/src/fetch-client.ts
@@ -999,6 +999,7 @@ export type SmartSearchDto = {
     albumIds?: string[];
     city?: string | null;
     country?: string | null;
+    maxDistance?: number;
     createdAfter?: string;
     createdBefore?: string;
     deviceId?: string;
diff --git a/server/src/dtos/asset-response.dto.ts b/server/src/dtos/asset-response.dto.ts
index f60f2a8..ffac991 100644
--- a/server/src/dtos/asset-response.dto.ts
+++ b/server/src/dtos/asset-response.dto.ts
@@ -93,6 +93,11 @@ export class AssetResponseDto extends SanitizedAssetResponseDto {
 
   @PropertyLifecycle({ deprecatedAt: 'v1.113.0' })
   resized?: boolean;
+
+  @ApiProperty({ type: 'number', required: false })
+  distance?: number;
+  @ApiProperty({ type: 'number', required: false })
+  similarity?: number;
 }
 
 export type MapAsset = {
@@ -228,5 +233,7 @@ export function mapAsset(entity: MapAsset, options: AssetMapOptions = {}): Asset
     hasMetadata: true,
     duplicateId: entity.duplicateId,
     resized: true,
+    distance: (entity as any).distance,
+    similarity: (entity as any).similarity,
   };
 }
diff --git a/server/src/dtos/search.dto.ts b/server/src/dtos/search.dto.ts
index f709ad9..5ae22c7 100644
--- a/server/src/dtos/search.dto.ts
+++ b/server/src/dtos/search.dto.ts
@@ -1,6 +1,6 @@
 import { ApiProperty } from '@nestjs/swagger';
 import { Type } from 'class-transformer';
-import { IsInt, IsNotEmpty, IsString, Max, Min } from 'class-validator';
+import { IsInt, IsNotEmpty, IsNumber, IsString, Max, Min } from 'class-validator';
 import { Place } from 'src/database';
 import { PropertyLifecycle } from 'src/decorators';
 import { AlbumResponseDto } from 'src/dtos/album.dto';
@@ -211,6 +211,14 @@ export class SmartSearchDto extends BaseSearchWithResultsDto {
   @Type(() => Number)
   @Optional()
   page?: number;
+
+  @IsNumber()
+  @Min(0)
+  @Max(2)
+  @Type(() => Number)
+  @Optional()
+  @ApiProperty({ type: 'number', required: false, description: 'Maximum distance threshold for filtering results (0-2, lower is more similar)' })
+  maxDistance?: number;
 }
 
 export class SearchPlacesDto {
diff --git a/server/src/repositories/search.repository.ts b/server/src/repositories/search.repository.ts
index 36ef7a2..738d13c 100644
--- a/server/src/repositories/search.repository.ts
+++ b/server/src/repositories/search.repository.ts
@@ -127,7 +127,9 @@ export type SmartSearchOptions = SearchDateOptions &
   SearchStatusOptions &
   SearchUserIdOptions &
   SearchPeopleOptions &
-  SearchTagOptions;
+  SearchTagOptions & {
+    maxDistance?: number;
+  };
 
 export type LargeAssetSearchOptions = AssetSearchOptions & { minFileSize?: number };
 
@@ -282,14 +284,39 @@ export class SearchRepository {
 
     return this.db.transaction().execute(async (trx) => {
       await sql`set local vchordrq.probes = ${sql.lit(probes[VectorIndex.Clip])}`.execute(trx);
-      const items = await searchAssetBuilder(trx, options)
+      
+      let query = searchAssetBuilder(trx, options)
         .selectAll('asset')
+        .select(sql<number>`smart_search.embedding <=> ${options.embedding}`.as('distance'))
         .innerJoin('smart_search', 'asset.id', 'smart_search.assetId')
-        .orderBy(sql`smart_search.embedding <=> ${options.embedding}`)
+        .orderBy(sql`smart_search.embedding <=> ${options.embedding}`);
+      
+      // Apply distance filter if maxDistance is specified
+      if (options.maxDistance !== undefined && options.maxDistance >= 0) {
+        query = query.where(sql`smart_search.embedding <=> ${options.embedding}`, '<=', options.maxDistance);
+      }
+      
+      const items = await query
         .limit(pagination.size + 1)
         .offset((pagination.page - 1) * pagination.size)
         .execute();
-      return paginationHelper(items, pagination.size);
+      
+      // Map items to include distance and similarity in the asset response
+      const itemsWithDistance = items.map((item: any) => {
+        // Extract distance value from the result
+        const distance = item.distance;
+        // Remove distance from the raw result to avoid TypeScript issues
+        const { distance: _, ...assetData } = item;
+        
+        // Return asset with distance and similarity properties
+        return {
+          ...assetData,
+          distance,
+          similarity: distance !== undefined ? 1 - distance : undefined
+        };
+      });
+      
+      return paginationHelper(itemsWithDistance, pagination.size);
     });
   }
 
diff --git a/web/src/routes/(user)/search/[[photos=photos]]/[[assetId=id]]/+page.svelte b/web/src/routes/(user)/search/[[photos=photos]]/[[assetId=id]]/+page.svelte
index 56e58c3..6651a09 100644
--- a/web/src/routes/(user)/search/[[photos=photos]]/[[assetId=id]]/+page.svelte
+++ b/web/src/routes/(user)/search/[[photos=photos]]/[[assetId=id]]/+page.svelte
@@ -68,7 +68,7 @@
 
   const assetInteraction = new AssetInteraction();
 
-  type SearchTerms = MetadataSearchDto & Pick<SmartSearchDto, 'query'>;
+  type SearchTerms = MetadataSearchDto & Pick<SmartSearchDto, 'query' | 'maxDistance'>;
   let searchQuery = $derived(page.url.searchParams.get(QueryParameter.QUERY));
   let smartSearchEnabled = $derived($featureFlags.loaded && $featureFlags.smartSearch);
   let terms = $derived(searchQuery ? JSON.parse(searchQuery) : {});
